# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more infsormation see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Basic golang CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
#  push:
#    branches: [ main ]
#  pull_request:
#    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: 1.20.x
          cache: true
      - name: Install dependencies
        run: go get .
      - name: Test
        run: go test

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: 1.20.x
          cache: true
      - name: Install dependencies
        run: go get .
      - name: Build
        run: go build
      - run: ls
  container:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - id: "auth"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}" # The GCP credentials JSON SERVICE_ACCOUNT_KEY
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v2"
      - name: "Use gcloud CLI"
        run: "gcloud info"
      - run: |-
          gcloud --quiet auth configure-docker europe-central2-docker.pkg.dev
      #      - name: Log into registry
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            europe-central2-docker.pkg.dev/sdp-demo-388112/container-repo/fiber-mongo
#            ghcr.io/username/app
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
#          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}
#          tags: europe-central2-docker.pkg.dev/sdp-demo-388112/container-repo/fiber-mongo
#          tags: yurikrupnik/fiber-mongo
#  old:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-go@v4
#        with:
#          go-version: 1.20.x
#      - run: go version
#      - run: go test ./...
#      - run: go build
#      - name: Login to DockerHub Registry
#        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
#      - run: |
#          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
#          git config --global user.name "bot"
##      - name: Bump version
##        uses: remorses/bump-version@js
##        with:
##          version_file: ./VERSION
##        env:
##          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      - name: Set outputs
#        id: vars
#        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
#      - name: Check outputs
#        run: echo ${{ steps.vars.outputs.sha_short }}
#      - name: 'Automated Version Bump'
#        uses: 'phips28/gh-action-bump-version@master'
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          default: prerelease
#          preid: 'prc'
#      - run: echo "$TAG"
#      - run: cat package.json
#      - run: env
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v2
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v2
#      - name: Inspect builder
#        run: |
#          echo "Name:      ${{ steps.buildx.outputs.name }}"
#          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
#          echo "Status:    ${{ steps.buildx.outputs.status }}"
#          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
#          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
#      - name: Kaniko build
#        uses: aevea/action-kaniko@master
#        with:
#          image: yurikrupnik/fiber-mongo
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_PASSWORD }}
#          cache: true
#          cache_registry: yurikrupnik/cache




#        ${{ steps.vars.outputs.sha_short }} // or git tag
#      - name: Docker build
#        run: docker buildx build . -t yurikrupnik/fiber-mongo:${{ steps.vars.outputs.sha_short }} --platform linux/amd64,linux/arm64 --push
#      - name: Docker images
#        run: docker images
#      - name: Docker push
#        run: docker push yurikrupnik/fiber-mongo:${{ steps.vars.outputs.sha_short }}
#      - name: Run GoReleaser
#        uses: goreleaser/goreleaser-action@v3
#        with:
#          # either 'goreleaser' (default) or 'goreleaser-pro'
#          distribution: goreleaser
#          #          version: latestd
#          args: release --rm-dist
#        #          args: release --rm-dist
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      - name: Git tag and push
#        run: |
#          git tag -a v0.2.9 -m "third release"
#          git push --tags
#      - uses: rymndhng/release-on-push-action@v0.25.0
#        with:
#          bump_version_scheme: patch
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


